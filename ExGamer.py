import random
import time
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor


API_TOKEN = '6927487057:AAFJ0pdIuRQdYuvQ6LNfZK6lAHcKmO6fjLQ'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö–∞–∑–∏–Ω–æ" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {"coins": 0, "level": 1, "nickname": message.from_user.username, "solved_problems": 0}

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='earn'),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
        InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data='store'),
        InlineKeyboardButton("–ö–∞–∑–∏–Ω–æ(–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data='casino')  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö–∞–∑–∏–Ω–æ" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    )

    await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'earn')
async def earn_coins(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    level = user_data[user_id]["level"]

    num1 = random.randint(1, level * 10)
    num2 = random.randint(1, level * 10)
    answer = num1 + num2

    message_text = f"–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: {num1} + {num2} = ?"
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
    if user_data[user_id].get("last_message_id"):
        await bot.delete_message(chat_id=user_id, message_id=user_data[user_id]["last_message_id"])
    
    msg = await bot.send_message(chat_id=user_id, text=message_text)
    user_data[user_id]["last_message_id"] = msg.message_id
    user_data[user_id]["current_answer"] = answer

@dp.message_handler(content_types=types.ContentType.TEXT)
async def check_answer(message: types.Message):
    user_id = message.from_user.id
    if "current_answer" not in user_data.get(user_id, {}):
        return

    selected_answer = int(message.text)
    correct_answer = user_data[user_id]["current_answer"]

    if selected_answer == correct_answer:
        user_data[user_id]["coins"] += user_data[user_id]["level"]
        user_data[user_id]["solved_problems"] += 1
        await message.reply(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {user_data[user_id]['level']} –º–æ–Ω–µ—Ç. "
                            f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {user_data[user_id]['coins']} üòä")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_data[user_id].get("last_message_id"):
            await bot.delete_message(chat_id=user_id, message_id=user_data[user_id]["last_message_id"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å" –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='earn'))
        msg = await bot.send_message(chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        user_data[user_id]["last_message_id"] = msg.message_id
    else:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üòî")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_data[user_id].get("last_message_id"):
            await bot.delete_message(chat_id=user_id, message_id=user_data[user_id]["last_message_id"])
        
        # –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
        level = user_data[user_id]["level"]
        num1 = random.randint(1, level * 10)
        num2 = random.randint(1, level * 10)
        answer = num1 + num2
        message_text = f"–ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä: {num1} + {num2} = ?"
        msg = await bot.send_message(chat_id=user_id, text=message_text)
        user_data[user_id]["last_message_id"] = msg.message_id
        user_data[user_id]["current_answer"] = answer

admins = {123456789}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
user_data = {}



@dp.callback_query_handler(lambda c: c.data == 'casino')
async def enter_casino(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", user_id, "–≤–æ—à–µ–ª –≤ –∫–∞–∑–∏–Ω–æ.")
    await bot.send_message(chat_id=user_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ! ",
                           reply_markup=create_casino_menu())

def create_casino_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–û—Ä–µ–ª", callback_data='flip_coin_head'),
        InlineKeyboardButton("–†–µ—à–∫–∞", callback_data='flip_coin_tail'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main_menu')
    )
    return keyboard

@dp.callback_query_handler(lambda c: c.data in ['flip_coin_head', 'flip_coin_tail'])
async def flip_coin(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", user_id, "–≤—ã–±—Ä–∞–ª –∏–≥—Ä—É '–û—Ä–µ–ª –∏ –†–µ—à–∫–∞'.")
    choice = callback_query.data.split('_')[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 'head' –∏–ª–∏ 'tail'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ —Ä–∞–∑–º–µ—Ä–µ —Å—Ç–∞–≤–∫–∏
    await bot.send_message(chat_id=user_id, text="–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏ (–≤ –º–æ–Ω–µ—Ç–∞—Ö):",
                           reply_markup=types.ForceReply())

@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_bet(message: types.Message):
    user_id = message.from_user.id
    if message.reply_to_message and message.reply_to_message.text == "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏ (–≤ –º–æ–Ω–µ—Ç–∞—Ö):":
        bet_amount = int(message.text)
        user_balance = user_data[user_id]["coins"]

        if bet_amount > user_balance:
            await bot.send_message(chat_id=user_id, text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        choice = message.reply_to_message.reply_markup.inline_keyboard[0][0].text
        if choice not in ['–û—Ä–µ–ª', '–†–µ—à–∫–∞']:
            await bot.send_message(chat_id=user_id, text="–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞.")
            return

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = random.choice(['–û—Ä–µ–ª', '–†–µ—à–∫–∞'])  # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –º–µ–∂–¥—É "–û—Ä–µ–ª" –∏ "–†–µ—à–∫–∞"

        if choice == result:
            user_data[user_id]["coins"] += bet_amount  # –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ —É–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
            await bot.send_message(chat_id=user_id, text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[user_id]['coins']} –º–æ–Ω–µ—Ç. üéâ")
        else:
            user_data[user_id]["coins"] -= bet_amount
            await bot.send_message(chat_id=user_id, text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[user_id]['coins']} –º–æ–Ω–µ—Ç. üòî")

@dp.callback_query_handler(lambda c: c.data == 'back_to_main_menu')
async def back_to_main_menu(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                           reply_markup=create_main_menu())

def create_main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='earn'),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
        InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data='store'),
        InlineKeyboardButton("–ö–∞–∑–∏–Ω–æ", callback_data='casino')
    )
    return keyboard

def create_main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='earn'),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
        InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data='store'),
        InlineKeyboardButton("–ö–∞–∑–∏–Ω–æ", callback_data='casino')
    )
    return keyboard


@dp.message_handler(commands=['casino'])
async def enter_casino_command(message: types.Message):
    user_id = message.from_user.id
    # –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∑–∏–Ω–æ
    await bot.send_message(chat_id=user_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.")


def apply_upgrade(user_id, earnings):
    upgrades = user_data[user_id].get("upgrades", {})
    multiplier = upgrades.get("multiplier", 1)  # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —É–ª—É—á—à–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ 1
    return earnings * multiplier



@dp.callback_query_handler(lambda c: c.data == 'profile')
async def view_profile(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    nickname = user_data[user_id]["nickname"]
    balance = user_data[user_id]["coins"]
    solved_problems = user_data[user_id]["solved_problems"]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥–∏ –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
    profile_text = f"<b>–ù–∏–∫-–Ω–µ–π–º:</b> {nickname}\n<b>–ê–π–¥–∏:</b> <code>{user_id}</code>\n<b>–ë–∞–ª–∞–Ω—Å:</b> {balance}\n<b>–ö–æ–ª-–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:</b> {solved_problems}"
    await bot.send_message(chat_id=user_id, text=profile_text, parse_mode='HTML')



@dp.message_handler(commands=['pay'])
async def pay_coins(message: types.Message):
    user_id = message.from_user.id
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        _, target_user, amount = message.text.split()
        target_user_id = int(target_user[1:])  # –£–±–∏—Ä–∞–µ–º "@" –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        amount = int(amount)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_data[user_id]["coins"] < amount:
            await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_data[user_id]["coins"] -= amount
        user_data[target_user_id]["coins"] += amount

        await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user}."
                            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['coins']}")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay @username amount")


@dp.message_handler(commands=['banbot'])
async def ban_bot(message: types.Message):
    admin_id = message.from_user.id
    if admin_id not in admins:
        await message.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    try:
        _, target_user, ban_time = message.text.split()
        target_user_id = int(target_user[1:])  # –£–±–∏—Ä–∞–µ–º "@" –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ban_time = int(ban_time)

        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ
        await bot.restrict_chat_member(message.chat.id, target_user_id, until_date=time.time() + ban_time)

        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ –Ω–∞ {ban_time} —Å–µ–∫—É–Ω–¥.")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /banbot @username ban_time")


@dp.message_handler(commands=['mute'])
async def mute_user(message: types.Message):
    admin_id = message.from_user.id
    if admin_id not in admins:
        await message.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    try:
        _, target_user, mute_time = message.text.split()
        target_user_id = int(target_user[1:])  # –£–±–∏—Ä–∞–µ–º "@" –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mute_time = int(mute_time)

        # –î–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º—É—Ç –≤ —á–∞—Ç–µ
        await bot.restrict_chat_member(message.chat.id, target_user_id, until_date=time.time() + mute_time)

        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user} –ø–æ–ª—É—á–∏–ª –º—É—Ç –≤ —á–∞—Ç–µ –Ω–∞ {mute_time} —Å–µ–∫—É–Ω–¥.")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mute @username mute_time")


@dp.message_handler(commands=['givemoney'])
async def give_money(message: types.Message):
    admin_id = message.from_user.id
    if admin_id not in admins:
        await message.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    try:
        _, target_user, amount = message.text.split()
        target_user_id = int(target_user[1:])  # –£–±–∏—Ä–∞–µ–º "@" –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        amount = int(amount)

        # –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_data[target_user_id]["coins"] += amount

        await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user}."
                            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data[target_user_id]['coins']}")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /givemoney @username amount")

@dp.callback_query_handler(lambda c: c.data == 'store')
async def view_store(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–£–ª—É—á—à–µ–Ω–∏—è", callback_data='improvements'),
        InlineKeyboardButton("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", callback_data='cars'),
        InlineKeyboardButton("–î–æ–º–∞", callback_data='houses'),
        InlineKeyboardButton("–î–æ–Ω–∞—Ç", callback_data='donate')
    )

    await bot.send_message(chat_id=callback_query.from_user.id, text="[–í –†–ê–ó–†–ê–ë–û–¢–ö–ï] –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤: ", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'improvements')
async def view_improvements(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("x2 (500 –º–æ–Ω–µ—Ç)", callback_data='x2'),
        InlineKeyboardButton("x3 (1500 –º–æ–Ω–µ—Ç)", callback_data='x3'),
        InlineKeyboardButton("x10 (11000 –º–æ–Ω–µ—Ç)", callback_data='x10'),
        InlineKeyboardButton("x100 (115000 –º–æ–Ω–µ—Ç)", callback_data='x100')
    )


    await bot.send_message(chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ:", reply_markup=keyboard)
@dp.message_handler(commands=['id'])
async def get_user_id(message: types.Message):
    admin_id = message.from_user.id
    if admin_id not in admins:
        await message.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    try:
        _, target_user = message.text.split()
        target_user_id = int(target_user[1:])  # –£–±–∏—Ä–∞–µ–º "@" –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user}: {target_user_id}")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /id @username")

@dp.message_handler(content_types=types.ContentType.TEXT, commands=['users'])
async def show_users(message: types.Message):
    admin_id = message.from_user.id
    if admin_id not in admins:
        await message.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    users_info = []
    for user_id, user_info in user_data.items():
        nickname = user_info.get("nickname", "")
        tag = f"@{user_info.get('nickname', '')}" if user_info.get('nickname') else ""
        users_info.append(f"{nickname} | {tag} | {user_id}")

    users_list = "\n".join(users_info)
    await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + users_list)


if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
